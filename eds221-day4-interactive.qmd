---
title: "EDS 221 Day 4 Interactive"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

## Functions

Make a function that doubles a value

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
}
```

```{r}
double_value(my_dollars = 10.13)
```

```{r}
# gives the same as above, don't have to label argument if you know the order
double_value(10.13)
```

```{r}
monthly_income <- c(42.50, 61.75, 89.50)

double_value(monthly_income)
```

Create a function that returns an awesome restaurant name given a cool animal and your favorite food.

```{r}
name_restaurant <- function(animal, food) {
  print(paste0(animal, food))
}

name_restaurant(animal = "hawk", food = "pizza")
```

Given temperature in degrees Fahrenheit, write a function that converts it to Celsius.

```{r}
convert_f_to_c <- function(temp_f) {
  print((5 / 9) * (temp_f - 32))
}

convert_f_to_c(temp_f = 70) # good practice to refer to arguments by name
```

Create a function that given inputs of age and hometown returns "I am \_\_ years old, and I'm from \_\_\_"

```{r}
about_me <- function(age_yr, hometown) {
  print(paste("I am", age_yr, "years old, and I'm from", hometown))
 }

about_me(age_yr = 23, hometown = "Santa Barbara")
```

```{r}
double_value2 <- function(dollars) {
  dollars * 2
}
```

```{r}
double_value2(dollars = 10) * 0.08
```

Print and return statements

Print: "show me"

return: "store this so i can use it later"

## Functions with conditionals

```{r}
calculate_animal_age <- function(species, age_human_yrs) {
  if (species == "dog") {
    age_human_yrs * 7
  } else if (species == "goat") {
    age_human_yrs * 4.7
  } else {
    print("Please enter dog or goat")
  }
}
```

```{r}
calculate_animal_age(species = "dog", age_human_yrs = 10)

calculate_animal_age(species = "goat", age_human_yrs = 4)

calculate_animal_age(species = "whale", age_human_yrs = 10)
```

Write a function that, given temperature in Kelvin, if a user selects "metric" for the scale, then return degrees celcisus, or if they select "english" then return degrees in Fahrenheit.

```{r}
convert_temp_from_K <- function(scale, temp_K) {
  if (scale == "metric") {
    temp_K - 273.15
  } else if (scale == "english") {
    (temp_K - 273.15) * (9 / 5) + 32
  }
}
```

```{r}
convert_temp_from_K(scale = "english", temp_K = 400)
```

## More functions

Create a subset within a function, and then return something based on that subset.

```{r}
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"), 
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))
```

```{r}
dog_menu <- function(enter_dog_name) {
  my_subset <- filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", my_subset$dog_name, "and my favorite food is", my_subset$food))
}

dog_menu("Waffle")
```

## Function with a for loop

```{r}
df_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- round(mean(df[[i]], na.rm = TRUE), 2) # calculating mean value of each column
    column_name <- colnames(df[i]) # accessing column name of each column
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}
```

```{r}
df_means(mtcars)
```

```{r}
df_means(faithful)
```

## Warnings

Create a function to calculate the Betz limit:

-   air density: kg / m\^3

-   rotor radius: m

-   wind velocity: m/s

-   power: watts

```{r}
calculate_betz_windpower <- function(air_density, 
                                     rotor_radius, 
                                     wind_velocity) {
  if (wind_velocity > 130) {
    warning("Whoa, that's a pretty high windspeed. Are you sure?")
  }
  if (rotor_radius < 0) {
    stop("Rotor radius must be a postive value (meters)")
  }
  0.3 * air_density * pi * (rotor_radius ^ 2) * (wind_velocity ^ 3)
}
```

```{r}
calculate_betz_windpower(air_density = 1.2,
                         rotor_radius = 30,
                         wind_velocity = 50)
```

```{r}
calculate_betz_windpower(air_density = 1,
                         rotor_radius = 20,
                         wind_velocity = 1020)
```

```{r}
calculate_betz_windpower(air_density = 1,
                         rotor_radius = -9,
                         wind_velocity = 1020)
```
